/* tslint:disable */
/* eslint-disable */
/**
 * IndividualStartup API documentation
 * fileContent
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckReservationInDTO,
  CheckReservationOutDTO,
  ComputePriceOutDTO,
  DayInfo,
  DisabledDayDTO,
  GuestInfoInDTO,
  GuestInfoOutDTO,
  PensionRoomListOutDTO,
  ReservationInDTO,
  ResponseResult,
  RoomDetailOutDTO,
} from '../models';
import {
    CheckReservationInDTOFromJSON,
    CheckReservationInDTOToJSON,
    CheckReservationOutDTOFromJSON,
    CheckReservationOutDTOToJSON,
    ComputePriceOutDTOFromJSON,
    ComputePriceOutDTOToJSON,
    DayInfoFromJSON,
    DayInfoToJSON,
    DisabledDayDTOFromJSON,
    DisabledDayDTOToJSON,
    GuestInfoInDTOFromJSON,
    GuestInfoInDTOToJSON,
    GuestInfoOutDTOFromJSON,
    GuestInfoOutDTOToJSON,
    PensionRoomListOutDTOFromJSON,
    PensionRoomListOutDTOToJSON,
    ReservationInDTOFromJSON,
    ReservationInDTOToJSON,
    ResponseResultFromJSON,
    ResponseResultToJSON,
    RoomDetailOutDTOFromJSON,
    RoomDetailOutDTOToJSON,
} from '../models';

export interface CheckReservationRequest {
    checkReservationInDTO: CheckReservationInDTO;
}

export interface ComputePriceRequest {
    resourceId: string;
    sinceInLocalDate: string;
    tillInLocalDate: string;
}

export interface CreateResourceReservationRequest {
    reservationInDTO: ReservationInDTO;
}

export interface GetDisabledDaysForResourceGroupRequest {
    resourceGroup: string;
    since: Date;
    till: Date;
}

export interface GetGuestInfoRequest {
    guestResourceKey: string;
}

export interface GetResourceCalendarInfoRequest {
    resourceUUID: string;
    since: Date;
    till: Date;
}

export interface ListResourceGroupRequest {
    resourceGroupId: string;
    resourceGroupType: ListResourceGroupResourceGroupTypeEnum;
}

export interface LoadResourceDetailsRequest {
    listOfResourceUUUID?: Array<string>;
}

export interface UpdateGuestInfoRequest {
    guestResourceKey: string;
    guestInfoInDTO: GuestInfoInDTO;
}

/**
 * 
 */
export class PublicApiApi extends runtime.BaseAPI {

    /**
     */
    async checkReservationRaw(requestParameters: CheckReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckReservationOutDTO>>> {
        if (requestParameters.checkReservationInDTO === null || requestParameters.checkReservationInDTO === undefined) {
            throw new runtime.RequiredError('checkReservationInDTO','Required parameter requestParameters.checkReservationInDTO was null or undefined when calling checkReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public-api/check-reservation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckReservationInDTOToJSON(requestParameters.checkReservationInDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckReservationOutDTOFromJSON));
    }

    /**
     */
    async checkReservation(requestParameters: CheckReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckReservationOutDTO>> {
        const response = await this.checkReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async computePriceRaw(requestParameters: ComputePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputePriceOutDTO>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling computePrice.');
        }

        if (requestParameters.sinceInLocalDate === null || requestParameters.sinceInLocalDate === undefined) {
            throw new runtime.RequiredError('sinceInLocalDate','Required parameter requestParameters.sinceInLocalDate was null or undefined when calling computePrice.');
        }

        if (requestParameters.tillInLocalDate === null || requestParameters.tillInLocalDate === undefined) {
            throw new runtime.RequiredError('tillInLocalDate','Required parameter requestParameters.tillInLocalDate was null or undefined when calling computePrice.');
        }

        const queryParameters: any = {};

        if (requestParameters.sinceInLocalDate !== undefined) {
            queryParameters['sinceInLocalDate'] = requestParameters.sinceInLocalDate;
        }

        if (requestParameters.tillInLocalDate !== undefined) {
            queryParameters['tillInLocalDate'] = requestParameters.tillInLocalDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/{resourceId}/compute-price`.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputePriceOutDTOFromJSON(jsonValue));
    }

    /**
     */
    async computePrice(requestParameters: ComputePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputePriceOutDTO> {
        const response = await this.computePriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createResourceReservationRaw(requestParameters: CreateResourceReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.reservationInDTO === null || requestParameters.reservationInDTO === undefined) {
            throw new runtime.RequiredError('reservationInDTO','Required parameter requestParameters.reservationInDTO was null or undefined when calling createResourceReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public-api/create-reservation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationInDTOToJSON(requestParameters.reservationInDTO),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async createResourceReservation(requestParameters: CreateResourceReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createResourceReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDisabledDaysForResourceGroupRaw(requestParameters: GetDisabledDaysForResourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DisabledDayDTO>>> {
        if (requestParameters.resourceGroup === null || requestParameters.resourceGroup === undefined) {
            throw new runtime.RequiredError('resourceGroup','Required parameter requestParameters.resourceGroup was null or undefined when calling getDisabledDaysForResourceGroup.');
        }

        if (requestParameters.since === null || requestParameters.since === undefined) {
            throw new runtime.RequiredError('since','Required parameter requestParameters.since was null or undefined when calling getDisabledDaysForResourceGroup.');
        }

        if (requestParameters.till === null || requestParameters.till === undefined) {
            throw new runtime.RequiredError('till','Required parameter requestParameters.till was null or undefined when calling getDisabledDaysForResourceGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/get-blocked-days/{resourceGroup}/{since}/{till}`.replace(`{${"resourceGroup"}}`, encodeURIComponent(String(requestParameters.resourceGroup))).replace(`{${"since"}}`, encodeURIComponent(String(requestParameters.since))).replace(`{${"till"}}`, encodeURIComponent(String(requestParameters.till))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DisabledDayDTOFromJSON));
    }

    /**
     */
    async getDisabledDaysForResourceGroup(requestParameters: GetDisabledDaysForResourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DisabledDayDTO>> {
        const response = await this.getDisabledDaysForResourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGuestInfoRaw(requestParameters: GetGuestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestInfoOutDTO>> {
        if (requestParameters.guestResourceKey === null || requestParameters.guestResourceKey === undefined) {
            throw new runtime.RequiredError('guestResourceKey','Required parameter requestParameters.guestResourceKey was null or undefined when calling getGuestInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/{guestResourceKey}/guest-info`.replace(`{${"guestResourceKey"}}`, encodeURIComponent(String(requestParameters.guestResourceKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestInfoOutDTOFromJSON(jsonValue));
    }

    /**
     */
    async getGuestInfo(requestParameters: GetGuestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestInfoOutDTO> {
        const response = await this.getGuestInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getResourceCalendarInfoRaw(requestParameters: GetResourceCalendarInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DayInfo>>> {
        if (requestParameters.resourceUUID === null || requestParameters.resourceUUID === undefined) {
            throw new runtime.RequiredError('resourceUUID','Required parameter requestParameters.resourceUUID was null or undefined when calling getResourceCalendarInfo.');
        }

        if (requestParameters.since === null || requestParameters.since === undefined) {
            throw new runtime.RequiredError('since','Required parameter requestParameters.since was null or undefined when calling getResourceCalendarInfo.');
        }

        if (requestParameters.till === null || requestParameters.till === undefined) {
            throw new runtime.RequiredError('till','Required parameter requestParameters.till was null or undefined when calling getResourceCalendarInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/get-calendar-info/{resourceUUID}/{since}/{till}`.replace(`{${"resourceUUID"}}`, encodeURIComponent(String(requestParameters.resourceUUID))).replace(`{${"since"}}`, encodeURIComponent(String(requestParameters.since))).replace(`{${"till"}}`, encodeURIComponent(String(requestParameters.till))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DayInfoFromJSON));
    }

    /**
     */
    async getResourceCalendarInfo(requestParameters: GetResourceCalendarInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DayInfo>> {
        const response = await this.getResourceCalendarInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listResourceGroupRaw(requestParameters: ListResourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PensionRoomListOutDTO>>> {
        if (requestParameters.resourceGroupId === null || requestParameters.resourceGroupId === undefined) {
            throw new runtime.RequiredError('resourceGroupId','Required parameter requestParameters.resourceGroupId was null or undefined when calling listResourceGroup.');
        }

        if (requestParameters.resourceGroupType === null || requestParameters.resourceGroupType === undefined) {
            throw new runtime.RequiredError('resourceGroupType','Required parameter requestParameters.resourceGroupType was null or undefined when calling listResourceGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/resource-group/{resourceGroupType}/{resourceGroupId}/list-resources`.replace(`{${"resourceGroupId"}}`, encodeURIComponent(String(requestParameters.resourceGroupId))).replace(`{${"resourceGroupType"}}`, encodeURIComponent(String(requestParameters.resourceGroupType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PensionRoomListOutDTOFromJSON));
    }

    /**
     */
    async listResourceGroup(requestParameters: ListResourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PensionRoomListOutDTO>> {
        const response = await this.listResourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loadResourceDetailsRaw(requestParameters: LoadResourceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoomDetailOutDTO>>> {
        const queryParameters: any = {};

        if (requestParameters.listOfResourceUUUID) {
            queryParameters['listOfResourceUUUID'] = requestParameters.listOfResourceUUUID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/public-api/room-detail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomDetailOutDTOFromJSON));
    }

    /**
     */
    async loadResourceDetails(requestParameters: LoadResourceDetailsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoomDetailOutDTO>> {
        const response = await this.loadResourceDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGuestInfoRaw(requestParameters: UpdateGuestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.guestResourceKey === null || requestParameters.guestResourceKey === undefined) {
            throw new runtime.RequiredError('guestResourceKey','Required parameter requestParameters.guestResourceKey was null or undefined when calling updateGuestInfo.');
        }

        if (requestParameters.guestInfoInDTO === null || requestParameters.guestInfoInDTO === undefined) {
            throw new runtime.RequiredError('guestInfoInDTO','Required parameter requestParameters.guestInfoInDTO was null or undefined when calling updateGuestInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/public-api/{guestResourceKey}/guest-info`.replace(`{${"guestResourceKey"}}`, encodeURIComponent(String(requestParameters.guestResourceKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestInfoInDTOToJSON(requestParameters.guestInfoInDTO),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateGuestInfo(requestParameters: UpdateGuestInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateGuestInfoRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ListResourceGroupResourceGroupTypeEnum = {
    Pensionroom: 'PENSIONROOM',
    Motorhome: 'MOTORHOME',
    Restaurant: 'RESTAURANT'
} as const;
export type ListResourceGroupResourceGroupTypeEnum = typeof ListResourceGroupResourceGroupTypeEnum[keyof typeof ListResourceGroupResourceGroupTypeEnum];
