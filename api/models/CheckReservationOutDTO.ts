/* tslint:disable */
/* eslint-disable */
/**
 * IndividualStartup API documentation
 * fileContent
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CheckReservationOutDTO
 */
export interface CheckReservationOutDTO {
    /**
     * 
     * @type {string}
     * @memberof CheckReservationOutDTO
     */
    resourceUUID: string;
    /**
     * 
     * @type {string}
     * @memberof CheckReservationOutDTO
     */
    resourceName: string;
    /**
     * 
     * @type {number}
     * @memberof CheckReservationOutDTO
     */
    bookedGuests: number;
    /**
     * 
     * @type {number}
     * @memberof CheckReservationOutDTO
     */
    maximalGuest: number;
    /**
     * 
     * @type {Date}
     * @memberof CheckReservationOutDTO
     */
    localDateTill: Date;
    /**
     * 
     * @type {Date}
     * @memberof CheckReservationOutDTO
     */
    localDateSince: Date;
    /**
     * 
     * @type {number}
     * @memberof CheckReservationOutDTO
     */
    totalPrice: number;
    /**
     * 
     * @type {number}
     * @memberof CheckReservationOutDTO
     */
    nights: number;
    /**
     * 
     * @type {string}
     * @memberof CheckReservationOutDTO
     */
    mainImage?: string;
}

/**
 * Check if a given object implements the CheckReservationOutDTO interface.
 */
export function instanceOfCheckReservationOutDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "resourceUUID" in value;
    isInstance = isInstance && "resourceName" in value;
    isInstance = isInstance && "bookedGuests" in value;
    isInstance = isInstance && "maximalGuest" in value;
    isInstance = isInstance && "localDateTill" in value;
    isInstance = isInstance && "localDateSince" in value;
    isInstance = isInstance && "totalPrice" in value;
    isInstance = isInstance && "nights" in value;

    return isInstance;
}

export function CheckReservationOutDTOFromJSON(json: any): CheckReservationOutDTO {
    return CheckReservationOutDTOFromJSONTyped(json, false);
}

export function CheckReservationOutDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckReservationOutDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resourceUUID': json['resourceUUID'],
        'resourceName': json['resourceName'],
        'bookedGuests': json['bookedGuests'],
        'maximalGuest': json['maximalGuest'],
        'localDateTill': (new Date(json['localDateTill'])),
        'localDateSince': (new Date(json['localDateSince'])),
        'totalPrice': json['totalPrice'],
        'nights': json['nights'],
        'mainImage': !exists(json, 'mainImage') ? undefined : json['mainImage'],
    };
}

export function CheckReservationOutDTOToJSON(value?: CheckReservationOutDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resourceUUID': value.resourceUUID,
        'resourceName': value.resourceName,
        'bookedGuests': value.bookedGuests,
        'maximalGuest': value.maximalGuest,
        'localDateTill': (value.localDateTill.toISOString().substr(0,10)),
        'localDateSince': (value.localDateSince.toISOString().substr(0,10)),
        'totalPrice': value.totalPrice,
        'nights': value.nights,
        'mainImage': value.mainImage,
    };
}

