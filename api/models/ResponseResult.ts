/* tslint:disable */
/* eslint-disable */
/**
 * IndividualStartup API documentation
 * fileContent
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MessageResponseOutDTO } from './MessageResponseOutDTO';
import {
    MessageResponseOutDTOFromJSON,
    MessageResponseOutDTOFromJSONTyped,
    MessageResponseOutDTOToJSON,
} from './MessageResponseOutDTO';

/**
 * 
 * @export
 * @interface ResponseResult
 */
export interface ResponseResult {
    /**
     * 
     * @type {boolean}
     * @memberof ResponseResult
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponseResult
     */
    errorType?: ResponseResultErrorTypeEnum;
    /**
     * 
     * @type {Array<MessageResponseOutDTO>}
     * @memberof ResponseResult
     */
    messages: Array<MessageResponseOutDTO>;
    /**
     * 
     * @type {object}
     * @memberof ResponseResult
     */
    payload?: object;
}


/**
 * @export
 */
export const ResponseResultErrorTypeEnum = {
    Error: 'ERROR',
    Validation: 'VALIDATION',
    Conflict: 'CONFLICT'
} as const;
export type ResponseResultErrorTypeEnum = typeof ResponseResultErrorTypeEnum[keyof typeof ResponseResultErrorTypeEnum];


/**
 * Check if a given object implements the ResponseResult interface.
 */
export function instanceOfResponseResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "success" in value;
    isInstance = isInstance && "messages" in value;

    return isInstance;
}

export function ResponseResultFromJSON(json: any): ResponseResult {
    return ResponseResultFromJSONTyped(json, false);
}

export function ResponseResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': json['success'],
        'errorType': !exists(json, 'errorType') ? undefined : json['errorType'],
        'messages': ((json['messages'] as Array<any>).map(MessageResponseOutDTOFromJSON)),
        'payload': !exists(json, 'payload') ? undefined : json['payload'],
    };
}

export function ResponseResultToJSON(value?: ResponseResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'errorType': value.errorType,
        'messages': ((value.messages as Array<any>).map(MessageResponseOutDTOToJSON)),
        'payload': value.payload,
    };
}

