/* tslint:disable */
/* eslint-disable */
/**
 * IndividualStartup API documentation
 * fileContent
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MessageResponseOutDTO
 */
export interface MessageResponseOutDTO {
    /**
     * 
     * @type {string}
     * @memberof MessageResponseOutDTO
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof MessageResponseOutDTO
     */
    scope: MessageResponseOutDTOScopeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageResponseOutDTO
     */
    type: MessageResponseOutDTOTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageResponseOutDTO
     */
    message: string;
}


/**
 * @export
 */
export const MessageResponseOutDTOScopeEnum = {
    Field: 'FIELD',
    Component: 'COMPONENT',
    Global: 'GLOBAL'
} as const;
export type MessageResponseOutDTOScopeEnum = typeof MessageResponseOutDTOScopeEnum[keyof typeof MessageResponseOutDTOScopeEnum];

/**
 * @export
 */
export const MessageResponseOutDTOTypeEnum = {
    Info: 'INFO',
    Error: 'ERROR',
    Validation: 'VALIDATION',
    Conflict: 'CONFLICT',
    Success: 'SUCCESS'
} as const;
export type MessageResponseOutDTOTypeEnum = typeof MessageResponseOutDTOTypeEnum[keyof typeof MessageResponseOutDTOTypeEnum];


/**
 * Check if a given object implements the MessageResponseOutDTO interface.
 */
export function instanceOfMessageResponseOutDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function MessageResponseOutDTOFromJSON(json: any): MessageResponseOutDTO {
    return MessageResponseOutDTOFromJSONTyped(json, false);
}

export function MessageResponseOutDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageResponseOutDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': json['path'],
        'scope': json['scope'],
        'type': json['type'],
        'message': json['message'],
    };
}

export function MessageResponseOutDTOToJSON(value?: MessageResponseOutDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'scope': value.scope,
        'type': value.type,
        'message': value.message,
    };
}

