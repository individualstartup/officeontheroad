/* tslint:disable */
/* eslint-disable */
/**
 * IndividualStartup API documentation
 * fileContent
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RoomDetailOutDTO
 */
export interface RoomDetailOutDTO {
    /**
     * 
     * @type {string}
     * @memberof RoomDetailOutDTO
     */
    resourceUUID: string;
    /**
     * 
     * @type {string}
     * @memberof RoomDetailOutDTO
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RoomDetailOutDTO
     */
    numberOfBeds: number;
    /**
     * 
     * @type {number}
     * @memberof RoomDetailOutDTO
     */
    places: number;
    /**
     * 
     * @type {number}
     * @memberof RoomDetailOutDTO
     */
    area: number;
    /**
     * 
     * @type {string}
     * @memberof RoomDetailOutDTO
     */
    bedType: RoomDetailOutDTOBedTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RoomDetailOutDTO
     */
    showerType: RoomDetailOutDTOShowerTypeEnum;
}


/**
 * @export
 */
export const RoomDetailOutDTOBedTypeEnum = {
    Twinbed: 'TWINBED',
    Singlebed: 'SINGLEBED'
} as const;
export type RoomDetailOutDTOBedTypeEnum = typeof RoomDetailOutDTOBedTypeEnum[keyof typeof RoomDetailOutDTOBedTypeEnum];

/**
 * @export
 */
export const RoomDetailOutDTOShowerTypeEnum = {
    Bath: 'BATH',
    Shower: 'SHOWER'
} as const;
export type RoomDetailOutDTOShowerTypeEnum = typeof RoomDetailOutDTOShowerTypeEnum[keyof typeof RoomDetailOutDTOShowerTypeEnum];


/**
 * Check if a given object implements the RoomDetailOutDTO interface.
 */
export function instanceOfRoomDetailOutDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "resourceUUID" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "numberOfBeds" in value;
    isInstance = isInstance && "places" in value;
    isInstance = isInstance && "area" in value;
    isInstance = isInstance && "bedType" in value;
    isInstance = isInstance && "showerType" in value;

    return isInstance;
}

export function RoomDetailOutDTOFromJSON(json: any): RoomDetailOutDTO {
    return RoomDetailOutDTOFromJSONTyped(json, false);
}

export function RoomDetailOutDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomDetailOutDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'resourceUUID': json['resourceUUID'],
        'name': json['name'],
        'numberOfBeds': json['numberOfBeds'],
        'places': json['places'],
        'area': json['area'],
        'bedType': json['bedType'],
        'showerType': json['showerType'],
    };
}

export function RoomDetailOutDTOToJSON(value?: RoomDetailOutDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'resourceUUID': value.resourceUUID,
        'name': value.name,
        'numberOfBeds': value.numberOfBeds,
        'places': value.places,
        'area': value.area,
        'bedType': value.bedType,
        'showerType': value.showerType,
    };
}

